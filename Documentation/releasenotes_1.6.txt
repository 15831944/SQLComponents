RELEASENOTES SQLCOMPONENTS VERSION 1.6
======================================
===== Released since: 22-06-2019 =====
======================================

Version 1.6.2 of 06-04-2020
---------------------------
1) Forward port of 6 issues for the 'bcd' datatype
   coming from the "https://github.com/edwig/bcd" project
2) Added the SQLDriverManager class
3) Added a combo box with ODBC datasources to SQLConnections application
   with the help of the SQLDriverManager.
4) Changed the "ResetDataType()" method of the SQLVariant to be a private method
   Added a new method "Reset()" with the intended purpose of the reset.
   "Reset()" now frees the allocated memory for char and binary pointers
   If this is not your intention: change your code to use "MakeNULL()"
   Fixed the unit tests with this method, and fixed all memory leaks in the process.
5) Fixed two memory leaks in the SQLDatabasePool::Cleanup() method
6) Added 'AddColumnRebind' and 'AddParamterRebind' methods to both the classes
   SQLDatabase and SQLDatabasePool.
   You can now preset datatype rebinds in the database pool. Those will be forewarded
   to the SQLDatabase class, and thus used in a SQLQuery to the database.
   Remark: rebind info that you configure in the SQLDatabasePool will be used for every
           database connection in your application. 
           If you are using multiple database types, set this info in the SQLDatabase
           just before you are querying.

Version 1.6.1 of 13-09-2019
---------------------------
1) Added "skip" functionality for the SQLDataSet to go with <top>
   The method "SetTopNRecords" now has an extra parameter "p_skip".
2) Added the possibility of a set of SQLFilters to do the work for
   the HAVING clause in the SQLDataSet.
3) Fixed a bug in SQLFilters. The order of HAVING and ORDER where
   incorrect, leading to incorrect SQL
4) Version numbers and dates are moved from all files to the 
   SQLComponents.h header file. So changes in the future will
   not spread among *all* files of the product.
5) Created a threshold for logging in SQLDatabase and SQLDatabasePool
   Use "SetLoggingActivation(int p_level)" to set the minimum logging 
   level. Logging at this level (or above) will trigger SQL logging
   in the connected logfile (Of used RegisterLogContent(...))

Version 1.6.0 of 22-06-2019
---------------------------
1) Added the SQLOperator enumerator for the SQLFilters
2) Added the SQLFunction enumerator for the SQLFilters
3) Expanded SQLFilters to work with a maximum of 1 SQLFunction
   Working filters for SQL Select statements in the SQLDataSet are:
   - fieldname <operator> <value>
   - FUNCTION(fieldname) <operator> <value>
   - fieldname <operator> <unary FUNCTION>
   Functions can have zero, one, two or three arguments.
   All values need to be added to the filter in that order, the 
   <value> to operate on as last.
   See: "Filtertest.cpp" for a number of examples.
   All ODBC 3.52 functions can be used for a condition filter
4) Added unit tests for all function-filter combinations
