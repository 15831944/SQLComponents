RELEASENOTES SQLCOMPONENTS VERSION 1.4
======================================
====== Released since:08-01-2017 =====
======================================

Version 1.4.2 of 28-01-2017
---------------------------
1) Complete rewrite of the SQLAssociation class. To use the new class
   lookup the manual in the *.cpp file there. You can connect master
   and detail classes with an association, and then follow the association
   from detail to master (rendering one SQLRecord). Or follow it from
   master to detail (redering a RecordSet of std::vector<SQLRecord>)
2) Fixed a seamingly memory leak. Fix was to correct the leak detection
   with a C-Runtime memory snapshot at the correct moment in time.
3) New SQLFilter class to be used with the new SQLAssociation class
   (see above under 1). Filters can be used within associations, but you
   can also create a set of filters and apply that to a SQLDataSet 
   before opening the set with "AddFilters".
   SQLFilters can be used in two ways:
   - To create an SQL condition text for usage in an SQL statement
   - To check if a record does exist within an SQLDataSet (in memory)
4) Added a 'DesignRules.txt' file in the documentation directory
5) Added unit tests for the SQLDBInfo discovery functions like
   MakeInfo* for finding out about tables and procedures.
   While creating the tests, some minor bugs in SQLInfoDB were fixed.

Version 1.4.1 of 15-01-2017
---------------------------
1) Libraries have been made to link automatically with your source code.
   Just include "SQLComponents.h" in your general "stdafx.h" file and
   nowhere else. It will automatically select the needed library for you.

Version 1.4.0 of 08-01-2017
---------------------------
1) There is now a general include file "SQLComponents.h", for inclusion
   in all program modules using this library. 
   You can find macro's for the version, version date and copyrights there.
2) This library can no longer be source-included in other projects.
   You must build it seperatly in one of two modes. These modes are:
   A) Intended to be used in small projects without MFC, and only with
      the defines for the ATL based "CString" class.
	  In this mode you **cannot** use the SQLInfoTree class.
   B) intended to be used in larger MFC projects, where you also can use the
      SQLInfoTree class. (Originally written for the "Open ODBC Querytool")
	  To do so you must define the follwing macro in the project file:
	  #define SQL_COMPONENTS_MFC
3) The xml module is replaced by a clone of XMLMessage from the Marlin
   library under "https://github.com/edwig/Marlin", taken from version 4.0
   If your program has been previous calling XMLLoad or XMLSave in the
   SQLDataSet, you must port your own programs from:
   - TinyXML::XmlDocument   => SQLComponents::XMLMessage 
   - TinyXML::XmlElement    => SQLComponents::XMLELement
4) The default language of various components has been altered from
   Dutch to English. The consequences are that this wil alter your software
   if you do not take measures. In order to use the library you must at least
   call one of the following once:
   - InitSQLComponents(language)
   - SetDefaultSQLLanguage(language)
   Where the 'language' argument can be one of:
   o LN_DUTCH
   o LN_ENGLISH
   o LN_GERMAN
   o LN_FRENCH
   Dates, times, timestamps and the naming of the XML nodes of the datasets
   will be named accordingly to the selected default language.
   Since the previous default language was 'Dutch', existing programs can
   best put a call in there startup code to:
   - InitSQLComponents(LN_DUTCH);
5) All comments in SQLInfo<database> classes have been translated from Dutch to English.
6) A new namespace has been created with the name "SQLComponents". All classes in this 
   library have been moved into that namespace. Use the following in your programs to 
   gain access to the classes of this library:
   - using namespace SQLComponents;
7) It is now possible in the SQLDatabase class to set the autocommit mode, before 
   connecting to a database. You can do this by calling:
   - SetAutoCommitMode(false);
   prior to making a connection. The result is that after the commit, autocommit mode is
   on, and a SQLTransaction on the stack will be needed to commit your changes, protecting
   you from unwanted modifications to the database.
   Of course there is a mirroring: "bool SQLDatabase::GetAutoCommitMode()" call.
